# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import market_surveillance_pb2 as market__surveillance__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in market_surveillance_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarketSurveillanceServiceStub(object):
    """Market surveillance gRPC service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectFraud = channel.unary_unary(
                '/market_surveillance.MarketSurveillanceService/DetectFraud',
                request_serializer=market__surveillance__pb2.FraudDetectionRequest.SerializeToString,
                response_deserializer=market__surveillance__pb2.FraudDetectionResult.FromString,
                _registered_method=True)
        self.DetectFraudBatch = channel.unary_unary(
                '/market_surveillance.MarketSurveillanceService/DetectFraudBatch',
                request_serializer=market__surveillance__pb2.BatchFraudDetectionRequest.SerializeToString,
                response_deserializer=market__surveillance__pb2.BatchFraudDetectionResponse.FromString,
                _registered_method=True)
        self.StreamFraudDetection = channel.unary_stream(
                '/market_surveillance.MarketSurveillanceService/StreamFraudDetection',
                request_serializer=market__surveillance__pb2.StreamFraudDetectionRequest.SerializeToString,
                response_deserializer=market__surveillance__pb2.FraudDetectionResult.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/market_surveillance.MarketSurveillanceService/HealthCheck',
                request_serializer=market__surveillance__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=market__surveillance__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.GetModelMetrics = channel.unary_unary(
                '/market_surveillance.MarketSurveillanceService/GetModelMetrics',
                request_serializer=market__surveillance__pb2.ModelMetricsRequest.SerializeToString,
                response_deserializer=market__surveillance__pb2.ModelMetricsResponse.FromString,
                _registered_method=True)


class MarketSurveillanceServiceServicer(object):
    """Market surveillance gRPC service
    """

    def DetectFraud(self, request, context):
        """Single fraud detection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectFraudBatch(self, request, context):
        """Batch fraud detection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFraudDetection(self, request, context):
        """Stream fraud detection (server streaming)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelMetrics(self, request, context):
        """Get model metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketSurveillanceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectFraud,
                    request_deserializer=market__surveillance__pb2.FraudDetectionRequest.FromString,
                    response_serializer=market__surveillance__pb2.FraudDetectionResult.SerializeToString,
            ),
            'DetectFraudBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectFraudBatch,
                    request_deserializer=market__surveillance__pb2.BatchFraudDetectionRequest.FromString,
                    response_serializer=market__surveillance__pb2.BatchFraudDetectionResponse.SerializeToString,
            ),
            'StreamFraudDetection': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamFraudDetection,
                    request_deserializer=market__surveillance__pb2.StreamFraudDetectionRequest.FromString,
                    response_serializer=market__surveillance__pb2.FraudDetectionResult.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=market__surveillance__pb2.HealthCheckRequest.FromString,
                    response_serializer=market__surveillance__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetModelMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelMetrics,
                    request_deserializer=market__surveillance__pb2.ModelMetricsRequest.FromString,
                    response_serializer=market__surveillance__pb2.ModelMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'market_surveillance.MarketSurveillanceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('market_surveillance.MarketSurveillanceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketSurveillanceService(object):
    """Market surveillance gRPC service
    """

    @staticmethod
    def DetectFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/market_surveillance.MarketSurveillanceService/DetectFraud',
            market__surveillance__pb2.FraudDetectionRequest.SerializeToString,
            market__surveillance__pb2.FraudDetectionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectFraudBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/market_surveillance.MarketSurveillanceService/DetectFraudBatch',
            market__surveillance__pb2.BatchFraudDetectionRequest.SerializeToString,
            market__surveillance__pb2.BatchFraudDetectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamFraudDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_surveillance.MarketSurveillanceService/StreamFraudDetection',
            market__surveillance__pb2.StreamFraudDetectionRequest.SerializeToString,
            market__surveillance__pb2.FraudDetectionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/market_surveillance.MarketSurveillanceService/HealthCheck',
            market__surveillance__pb2.HealthCheckRequest.SerializeToString,
            market__surveillance__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/market_surveillance.MarketSurveillanceService/GetModelMetrics',
            market__surveillance__pb2.ModelMetricsRequest.SerializeToString,
            market__surveillance__pb2.ModelMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
